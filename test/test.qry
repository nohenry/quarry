
let main = (uint8 argc) uint8 {
    let value = malloc(200000)
    value.* = argc * 2

    uint mut i = 1
    loop i < 20000 {
        value[i] = 0xdd
        i += 1
    }

    wildness(1, 2, 3)
    wildness(3, 0, 69)
    wildness(3, 0, true)
    wildness(false, 0, true)
    wildness(false, i, true)

    let res2 = foo(i.&)
    let res3 = foo(i.&)
    let res = foo(value)
    let res1 = foo(value)
    res
}

let foo = (*T& a) T {
    a.*
}

let wildness = (*A a, *B b, *C c) {
}

let OneOf = type(int8) int8 A  | int8 B

let test_union_double = (OneOf val) int8 { val.A * 2 }
let test_union_double_ref = (OneOf& val) int8 { val.A * 2 }

let test_union1 = (int8 value) int8 {
    OneOf d = .A :: value 
    test_union_double(d)
}

let test_union2 = (int8 value) int8 {
    OneOf d = .A :: value 
    test_union_double_ref(d.&)
}

let Data = type [int8 a]

let test_record_double = (Data val) int8 { val.a * 2 }
let test_record_double_ref = (Data& val) int8 { val.a * 2 }

let test_record1 = (int8 value) int8 {
    Data d = [a: value]
    test_record_double(d)
}

let test_record2 = (int8 value) int8 {
    Data d = [a: 0]
    d.a = value
    test_record_double(d)
}

let test_record3 = (int8 value) int8 {
    Data d = [a: 0]
    d.a = value
    test_record_double_ref(d.&)
}

let test_record4 = (int8 value) int8 {
    Data d = [a: 0]
    d.a = value
    Data& dp = d.&
    test_record_double_ref(dp)
}


let test_array_double = ([int8: 4] val) int8 { val[2] * 2 }
let test_slice_double = ([int8] val) int8 { val[2] * 2 }

let test_array1 = (int8 value) int8 {
    [int8: 4] totest = [1, 2, value, 4]
    test_array_double(totest)
}

let test_slice1 = (int8 value) int8 {
    [int8: 4] totest = [1, 2, value, 4]
    test_slice_double(totest.&)
}

let test_slice2 = (int8 value) int8 {
    [int8] totest = [1, 2, value, 4].&
    test_slice_double(totest)
}

let test_slice3 = (int8 value) int8 {
    test_slice_double([1, 2, value, 4].&)
}

let test_array3 = (int8 value) int8 {
    test_array_double([1, 2, value, 4])
}

extern let malloc = (int size) uint8&
